https://www.typescriptlang.org
instalacja TS: npm install typescript --save-dev
kompilacja: pojedynczego pliku: npx tsc plik.ts
kompilacja ciągła projektu: (npm init), npx tsc --init (tylko raz), potem npx tsc --watch
development server: npm start

sec1(1-9)
-instalacja TS: npm install typescript --save-dev
-kompilacja: npx tsc plik.ts -> plik.js
-empty base project: 
--npm init -> package.json | npm install --save-dev typescript | npm install --save-dev lite-server | in package.json add script: "start": "lite-server"
--development server: npm start (ale kompilacja nadal musi być ręczna: npx tsc plik.ts)

sec2(10-32) Basic Types
-core types: number, string, boolean, objects, arrays
-tuples, enums, any
-union types, literal types, custom(alias) types
-function return types, void, 'Function' type, function types
-'unknown' type, 'never' type

sec3(33-47) Compiler config, Debugging
-watch mode jednego pliku: npx tsc plik.ts --watch (lub -w)
-watch mode całego projektu
--npx tsc --init (tylko raz! -> tsconfig.json)
--npx tsc --watch / npx tsc -w -kompilacja ciągła całego projektu
-excluding files from compilation
-enabling source maps
-rootDir (src), outDir (dist)
-stop emitting js files on ts errors
-debugging in VSC: 
--tsconfig.json: "sourceMap": true
--mark a breakpoint
--Run | Start Debugging | (Chrome) 
--launch.json: http://localhost:3000
--Run | Start Debugging

sec4(48-56) ES6

sec5(57-81) Classes & Interfaces
-Classes: 
--private, public, protected, readonly memmbers
--construtor shorthand initialization
--inheritance: private fields do not inherit! (protected yes)
--overriding methods
--getters & setters
--static fields and methods
--abstract classes and methods
--singletons, private constructors
-Interfaces
--readonly allowed, private/public not
--implement/extend class vs interface:
---class implements interface1, interface2...
---class extends only_one_class;
---interface extends interface1, interface2...
--interfaces for functions
--optional members in interfaces and classes

sec6(82-92) Advanced Types
-intersection types
-type guards: if...: typeof, instanceof, 'property' in object, 
-type casting, ! (not null)
-index properties
-function overloads
-optional chaining (?)
-nullish coalescing (??)

sec7(93-103) Generics
-generic types, 
-generic functions
-generic constraints, 'keyof' constraint
-generic classes
-'Partial' generic type - makes all properies optional - '?'
-'Readonly' generic type

sec8(104-119) Decorators
-tsconfig.json: "experimentalDecorators": true
-decorator function
-decorator factory
-'_' function argument - means that it won't be used in function - to turn off warning
-decorators execution order: bottom->up
-class decorator
-property decorator
-accessor decorator
-method decorator
-parameter decorator
-decorator return values

sec9(120-139) "Drag&Drop" Project 

sec10(140-150) Modules & Namespaces
-namespaces: 
--setting "outFile": "./dist/bundle.js" option in tsconfig.json, and change "module": from "commonjs" to "amd"
--import "dist/bundle.js" in index.html
--exporting: namespace{ export... }
--importing: /// <reference path="file.ts" />
-ES6 modules
--setting "module": to "es2015", comment out "outFile" in tsconfig.json
--import "app.js" in index.html, add type="module", delete "defer"

sec11(151-160) Webpack with TS
-npm install --save-dev webpack webpack-cli webpack-dev-server typescript ts-loader
-npm install --save-dev clean-webpack-plugin

sec12(161-167) TS & libraries
-JS libraries: e.g. lodash: 
--install types for library: npm i --save-dev @types/lodash
--declare keyword
--class-transformer: npm i --save class-transformer, npm i --save reflect-metadata
--class validator: npm i --save class-validator
-TS libraries

sec13(168-175) "Select&Share a Place" Project
-npm install --save axios
-npm install --save-dev @types/googlemaps

sec14(176-188) TS & React
npx create-react-app . --template typescript (. - w bieżącym foldrze)

sec15(189-197) TS & Node+Express
-npm init
-npm install typescript --save-dev
-npx tsc --init
-tsconfig.json
-npm install --save express body-parser
-npm install --save-dev nodemon 